---
const items = [
  // {
  //   slug: '/',
  //   title: 'Forsiden',
  // },
  {
    slug: 'produkter',
    title: 'Produkter',
  },
  {
    slug: 'diamanter',
    title: 'Diamanter',
  },
  {
    slug: 'tips',
    title: 'Tips',
  },
  {
    slug: 'om-butikken',
    title: 'Om butikken',
  },
  {
    slug: 'kontakt',
    title: 'Kontakt',
  },
  {
    slug: 'aapningstider',
    title: 'Åpningstider',
  },
];

const { slug } = Astro.props;
---

<nav id="mainnav">
  <ul role="list">
    {
      items.map((item) => (
        <li>
          <a
            href={item.slug === '' ? '/' : `/${item.slug}/`}
            aria-current={slug === item.slug ? 'page' : 'false'}
          >
            {item.title}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<template id="burger-template">
  <button
    type="button"
    aria-expanded="false"
    aria-label="Meny"
    aria-controls="mainnav"
  >
    <span class="sr-only sr-only-focusable">Åpne</span>
    <svg
      width="26"
      height="18"
      viewBox="0 0 26 18"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      aria-hidden="true"
    >
      <line
        x1="25.3792"
        y1="0.6"
        x2="0.37915"
        y2="0.6"
        stroke="var(--icon-color, currentColor)"
        stroke-width="1.2"></line>
      <line
        x1="25.3792"
        y1="8.6"
        x2="0.37915"
        y2="8.6"
        stroke="var(--icon-color, currentColor)"
        stroke-width="1.2"></line>
      <line
        x1="25.3792"
        y1="16.6"
        x2="0.37915"
        y2="16.6"
        stroke="var(--icon-color, currentColor)"
        stroke-width="1.2"></line>
    </svg>
  </button>
</template>

<script>
  const nav = document.querySelector('nav');
  const list = nav.querySelector('ul');
  const burgerClone = document
    .querySelector('#burger-template')
    .content.cloneNode(true);

  const button = burgerClone.querySelector('button');
  button.addEventListener('click', (e) => {
    const isOpen = button.getAttribute('aria-expanded') === 'false';

    button.setAttribute('aria-expanded', isOpen);

    isOpen
      ? (button.firstElementChild.innerText = 'Lukk')
      : (button.firstElementChild.innerText = 'Åpne');
  });

  nav.addEventListener('keyup', (e) => {
    if (e.code === 'Escape') {
      button.setAttribute('aria-expanded', false);
      button.focus();
    }
  });

  nav.insertBefore(burgerClone, list);
</script>

<style>
  /* Define variables for your colors */
  /* :root {
    --color-shades-dark: hsl(0 0% 0%);
    --color-shades-light: hsl(0 100% 100%);
    --color-highlight: hsl(55 98% 52%);
  } */

  @media (min-width: 48em) {
    nav {
      --nav-button-display: none;
      --nav-position: static;
    }

    ul {
      --nav-list-layout: row;
      --nav-list-position: static;
      --nav-list-padding: 0;
      --nav-list-height: auto;
      --nav-list-width: 100%;
      --nav-list-shadow: none;
      --nav-list-transform: none;
      --nav-list-visibility: visible;
    }
  }

  /* Use the alternative box model */
  /* * {
    box-sizing: border-box;
  } */

  /* Remove the default :focus outline */
  /* *:focus {
    outline: none;
  } */

  /* Show a custom outline on :focus-visible */
  /* *:focus-visible {
    outline: 4px solid var(--color-shades-dark);
    outline-offset: 4px;
  } */

  /* body {
    font-family: Segoe UI, system-ui, -apple-system, sans-serif;
    font-size: 1.6rem;
  } */

  nav {
    /* position: var(--nav-position, fixed); */
    inset-block-start: 1rem;
    inset-inline-end: 1rem;
  }

  /* Remove default list styling and create layout for list */
  ul {
    background-color: rgb(255, 255, 255);
    box-shadow: var(--nav-list-shadow, -5px 0 11px 0 rgb(0 0 0 / 0.2));
    display: flex;
    flex-direction: var(--nav-list-layout, column);
    flex-wrap: wrap;
    gap: 0.9rem;
    height: var(--nav-list-height, 100vh);
    list-style: none;
    margin: 0;
    padding: var(--nav-list-padding, 2rem);
    position: var(--nav-list-position, fixed);
    inset-block-start: 0; /* Logical property. Equivalent to top: 0; */
    inset-inline-end: 0; /* Logical property. Equivalent to right: 0; */
    width: var(--nav-list-width, min(22rem, 100vw));
    visibility: var(--nav-list-visibility, visible);
  }
  @media (min-width: 48em) {
    ul {
      background-color: transparent;
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    ul {
      transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55),
        visibility 0.3s linear;
    }
  }

  [aria-expanded='false'] + ul {
    transform: var(--nav-list-transform, translateX(100%));
    visibility: var(--nav-list-visibility, hidden);
  }

  /* Basic link styling */
  a {
    --text-color: var(--color-shades-dark);

    border-block-end: 1px solid var(--border-color, transparent);
    color: var(--text-color);
    padding: 0.125rem;
    text-decoration: none;
  }

  @media (min-width: 48em) {
    a {
      --text-color: var(--color-shades-light);
    }
  }

  /* Change the border-color on :hover and :focus */
  a:where(:hover, :focus) {
    --border-color: var(--text-color);
  }

  /* Change border-color and color for the active page */
  [aria-current='page'] {
    --border-color: var(--color-shades-dark);
    --text-color: var(--color-shades-dark);
  }

  @media (min-width: 48em) {
    [aria-current='page'] {
      --border-color: var(--color-highlight);
      --text-color: var(--color-highlight);
    }
  }

  /* Reset button styling */
  button {
    --icon-color: white;
    all: unset;
    cursor: pointer;
    display: var(--nav-button-display, flex);
    position: relative;
    z-index: 1;
  }
</style>

<!-- <style lang="scss">
  nav {
    display: none;

    @media (min-width: 768px) {
      display: flex;
    }
  }

  ul {
    @media (min-width: 768px) {
      column-gap: 2em;
      display: flex;
    }
  }

  li:nth-last-child(-n + 2) {
    display: none;

    @media (min-width: 768px) {
      display: revert;
    }
  }

  a {
    font-weight: var(--fw-semi-bold, 600);
    text-decoration: none;
  }

  button[type='button'] {
    align-items: center;
    background-color: transparent;
    border: 0;
    cursor: pointer;
    display: flex;
    padding-inline: 0;

    @media (min-width: 768px) {
      display: none;
    }
  }

  .is-current {
    border-block-end: 2px solid tomato;
  }
</style> -->
